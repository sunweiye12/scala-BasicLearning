package _04运算符

/*

 */
object demo4 {
  def main(args: Array[String]): Unit = {

    var a = 10;
    var b = 20;
    var c = 25;
    var d = 25;
    println("算术运算符")
    println("a + b = " + (a + b) );
    println("a - b = " + (a - b) );
    println("a * b = " + (a * b) );
    println("b / a = " + (b / a) );
    println("b % a = " + (b % a) ); // 取余数
    println("c % a = " + (c % a) );

    println("关系运算符")
    println("a == b = " + (a == b))
    println("a != b = " + (a != b))
    println("a > b = " + (a > b))
    println("a < b = " + (a < b))
    println("b >= a = " + (b >= a))
    println("b <= a = " + (b <= a))

    println("逻辑运算符")
    var a1 = true;
    var b1 = false;
    println("a && b = " + (a1&&b1) );     // 取交
    println("a || b = " + (a1||b1) );     //取或
    println("!(a && b) = " + !(a1 && b1) ); // 取反

    println("位运算") //~, & , |, ^分别为取反，按位取与，按位取或，按位取异或运算
    /*
    &	按位与运算符	(a & b) 输出结果 12 ，二进制解释： 0000 1100
    |	按位或运算符	(a | b) 输出结果 61 ，二进制解释： 0011 1101
    ^	按位异或运算符	(a ^ b) 输出结果 49 ，二进制解释： 0011 0001
    ~	按位取反运算符	(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。
    <<	左移动运算符	a << 2 输出结果 240 ，二进制解释： 1111 0000
    >>	右移动运算符	a >> 2 输出结果 15 ，二进制解释： 0000 1111
    >>>	无符号右移	A >>>2 输出结果 15, 二进制解释: 0000 1111
    */
    var a2 = 60;           /* 60 = 0011 1100 */
    var b2 = 13;           /* 13 = 0000 1101 */
    var c2 = 0;
    c2 = a2 & b2;            /* 12 = 0000 1100 */
    println("a2 & b2 = " + c2 );
    c2 = a2 | b2;            /* 61 = 0011 1101 */
    println("a2 | b2 = " + c2 );
    c2 = a2 ^ b2;            /* 49 = 0011 0001 */
    println("a2 ^ b2 = " + c2 );
    c2 = ~a2;               /* -61 = 1100 0011 */
    println("~a2 = " + c2 );
    c2 = a2 << 2;           /* 240 = 1111 0000 */
    println("a2 << 2 = " + c2 );
    c2 = a2 >> 2;           /* 15 = 1111 */
    println("a2 >> 2  = " + c2 );
    c2 = a2 >>> 2;          /* 15 = 0000 1111 */
    println("a2 >>> 2 = " + c2 );

    println("赋值运算符")
    /*
    =	  简单的赋值运算，指定右边操作数赋值给左边的操作数。	C = A + B 将 A + B 的运算结果赋值给 C
    +=	相加后再赋值，将左右两边的操作数相加后再赋值给左边的操作数。	C += A 相当于 C = C + A
    -=	相减后再赋值，将左右两边的操作数相减后再赋值给左边的操作数。	C -= A 相当于 C = C - A
    *=	相乘后再赋值，将左右两边的操作数相乘后再赋值给左边的操作数。	C *= A 相当于 C = C * A
    /=	相除后再赋值，将左右两边的操作数相除后再赋值给左边的操作数。	C /= A 相当于 C = C / A
    %=	求余后再赋值，将左右两边的操作数求余后再赋值给左边的操作数。	C %= A is equivalent to C = C % A
    <<=	按位左移后再赋值	C <<= 2 相当于 C = C << 2
    >>=	按位右移后再赋值	C >>= 2 相当于 C = C >> 2
    &=	按位与运算后赋值	C &= 2 相当于 C = C & 2
    ^=	按位异或运算符后再赋值	C ^= 2 相当于 C = C ^ 2
    |=	按位或运算后再赋值	C |= 2 相当于 C = C | 2
     */

  }
}
